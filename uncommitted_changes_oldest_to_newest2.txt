








import { ApiProperty } from '@nestjs/swagger';
import { Transform, Type } from 'class-transformer';
import { IsBoolean, IsEnum, IsOptional, IsString } from 'class-validator';
import { AssetOrder, AssetType, TimeBucketSize } from 'src/enum';
import { ValidateUUID } from 'src/validators';

export class TimeBucketDto {
  @IsOptional()
  @ValidateUUID()
  @ApiProperty({ type: 'string' })
  albumId?: string;

  @IsOptional()
  @IsBoolean()
  @Type(() => Boolean)
  @ApiProperty()
  withStacked?: boolean;
  @IsOptional()
  @IsBoolean()
  @Type(() => Boolean)
  @ApiProperty()
  @IsOptional()
  @IsBoolean()
  @Type(() => Boolean)
  @ApiProperty()
  @IsOptional()
  @IsBoolean()
  @Type(() => Boolean)
  @ApiProperty()
  @IsOptional()
  @IsBoolean()
  @Type(() => Boolean)
  @ApiProperty()
  @IsOptional()
  @ApiProperty({ enum: AssetOrder })
  @IsOptional()
  @IsEnum(TimeBucketSize)
  @Transform(({ value }) => (typeof value === 'string' ? value.toUpperCase() : value))
  @ApiProperty({ enum: TimeBucketSize })
  size?: TimeBucketSize;

  @IsOptional()
  @IsEnum(AssetType)
  @ApiProperty({ enum: AssetType })
  assetType?: AssetType;

  @IsOptional()
  @ValidateUUID()
  @ApiProperty({ type: 'string' })
  userId?: string;

  @IsOptional()
  @ValidateUUID()
  @ApiProperty({ type: 'string' })
  personId?: string;

  @IsOptional()
  @ApiProperty()
  key?: string;
  @IsOptional()
  @ValidateUUID()
  tagId?: string;

  @IsOptional()
  @ValidateUUID({ each: true, optional: true })
  @ApiProperty({ type: 'string', isArray: true })
  tagIds?: string[];
  @IsOptional()
  @IsBoolean()
  @Type(() => Boolean)
  @ApiProperty()
  isDuplicate?: boolean;
}
++ b/server/src/repositories/asset.repository.ts
  tagIds?: string[];
  tagIds?: string[]; // Add it here if not in AssetBuilderOptions













  async getByAlbumId(
    albumId: string, 
    options: {
      order?: AssetOrder;
      tagIds?: string[];
      isFavorite?: boolean;
    } = {},
    pagination: PaginationOptions = { take: 100 }
  ): Paginated<AssetEntity> {
    console.log("Album ID:", albumId);
    console.log("Filter options:", JSON.stringify(options));
    
    let query = withAlbums(this.db.selectFrom('assets'), { albumId })
      .selectAll('assets')
      .where('deletedAt', 'is', null);


    if (options.tagIds && options.tagIds.length > 0) {
      query = query.where(eb => {
        return eb.exists(
          eb.selectFrom('asset_tags')
            .select(1)
            .whereRef('asset_tags.assetId', '=', 'assets.id')
            .where('asset_tags.tagId', 'in', options.tagIds)
        );
      });
    }
    
    
    if (options.isFavorite !== undefined) {
      query = query.where('assets.isFavorite', '=', options.isFavorite);
      console.log("SQL favorite filtering applied:", options.isFavorite);
    }
    
    if (options.order === AssetOrder.NEWEST) {
      query = query.orderBy('assets.fileCreatedAt', 'desc');
    } else if (options.order === AssetOrder.OLDEST) {
      query = query.orderBy('assets.fileCreatedAt', 'asc');
    } else {
      query = query.orderBy('assets.fileCreatedAt', 'desc');
    }
  
    console.log("Generated SQL query:", query.toSQL ? query.toSQL() : "SQL query not available");
    
    const items = await query.execute();
    console.log(`Found ${items.length} assets after filtering`);
    













async getTimeBuckets(options: TimeBucketOptions): Promise<TimeBucketItem[]> {
  return (
    this.db
      .with('assets', (qb) =>
          .selectFrom('assets')
          .select(truncatedDate<Date>(options.size).as('timeBucket'))
          .$if(!!options.isTrashed, (qb) => qb.where('assets.status', '!=', AssetStatus.DELETED))
          .where('assets.deletedAt', options.isTrashed ? 'is not' : 'is', null)
          .where('assets.isVisible', '=', true)
          .where('assets.fileCreatedAt', 'is not', null)
          .where('assets.fileModifiedAt', 'is not', null)
          .where('assets.localDateTime', 'is not', null)
          .$if(!!options.albumId, (qb) =>
            qb
              .innerJoin('albums_assets_assets', 'assets.id', 'albums_assets_assets.assetsId')
              .where('albums_assets_assets.albumsId', '=', asUuid(options.albumId!)),
          .$if(!!options.personId, (qb) => hasPeople(qb, [options.personId!]))
          .$if(!!options.withStacked, (qb) =>
            qb
              .leftJoin('asset_stack', (join) =>
                join
                  .onRef('asset_stack.id', '=', 'assets.stackId')
                  .onRef('asset_stack.primaryAssetId', '=', 'assets.id'),
              )
              .where((eb) => eb.or([eb('assets.stackId', 'is', null), eb(eb.table('asset_stack'), 'is not', null)])),
          .$if(!!options.userIds, (qb) => qb.where('assets.ownerId', '=', anyUuid(options.userIds!)))
          .$if(options.isArchived !== undefined, (qb) => qb.where('assets.isArchived', '=', options.isArchived!))
          .$if(options.isFavorite !== undefined, (qb) => qb.where('assets.isFavorite', '=', options.isFavorite!))
          .$if(!!options.assetType, (qb) => qb.where('assets.type', '=', options.assetType!))
          .$if(options.isDuplicate !== undefined, (qb) =>
            qb.where('assets.duplicateId', options.isDuplicate ? 'is not' : 'is', null),
          )
          .$if(!!options.tagId, (qb) => withTagId(qb, options.tagId!))
          .$if(!!options.tagIds && options.tagIds.length > 0, (qb) => {
            console.log("Filtering timeline buckets by tagIds:", options.tagIds);
            return qb.where(eb => {
              return eb.exists(
                eb.selectFrom('asset_tags')
                  .select(1)
                  .whereRef('asset_tags.assetId', '=', 'assets.id')
                  .where('asset_tags.tagId', 'in', options.tagIds!)
              );
            });
          })
      .selectFrom('assets')
      .select('timeBucket')
      TODO: the above line outputs in ISO format, which bloats the response.
      The line below outputs in YYYY-MM-DD format, but needs a change in the web app to work.
        .select(sql<string>`"timeBucket"::date::text`.as('timeBucket'))
      */
      .select((eb) => eb.fn.countAll<number>().as('count'))
      .groupBy('timeBucket')
      .orderBy('timeBucket', options.order ?? 'desc')
      .execute() as any as Promise<TimeBucketItem[]>
  );
}
















@GenerateSql({ params: [DummyValue.TIME_BUCKET, { size: TimeBucketSize.MONTH, withStacked: true }] })
async getTimeBucket(timeBucket: string, options: TimeBucketOptions): Promise<AssetEntity[]> {
  return this.db
    .selectFrom('assets')
    .selectAll('assets')
    .$call(withExif)
    .$if(!!options.albumId, (qb) => withAlbums(qb, { albumId: options.albumId }))
    .$if(!!options.personId, (qb) => hasPeople(qb, [options.personId!]))
    .$if(!!options.userIds, (qb) => qb.where('assets.ownerId', '=', anyUuid(options.userIds!)))
    .$if(options.isArchived !== undefined, (qb) => qb.where('assets.isArchived', '=', options.isArchived!))
    .$if(options.isFavorite !== undefined, (qb) => qb.where('assets.isFavorite', '=', options.isFavorite!))
    .$if(!!options.withStacked, (qb) =>
      qb
        .leftJoin('asset_stack', 'asset_stack.id', 'assets.stackId')
        .where((eb) =>
          eb.or([eb('asset_stack.primaryAssetId', '=', eb.ref('assets.id')), eb('assets.stackId', 'is', null)]),
        )
        .leftJoinLateral(
          (eb) =>
            eb
              .selectFrom('assets as stacked')
              .selectAll('asset_stack')
              .select((eb) => eb.fn.count(eb.table('stacked')).as('assetCount'))
              .whereRef('stacked.stackId', '=', 'asset_stack.id')
              .where('stacked.deletedAt', 'is', null)
              .where('stacked.isArchived', '=', false)
              .groupBy('asset_stack.id')
              .as('stacked_assets'),
          (join) => join.on('asset_stack.id', 'is not', null),
        )
        .select((eb) => eb.fn.toJson(eb.table('stacked_assets')).as('stack')),
    )
    .$if(!!options.assetType, (qb) => qb.where('assets.type', '=', options.assetType!))
    .$if(options.isDuplicate !== undefined, (qb) =>
      qb.where('assets.duplicateId', options.isDuplicate ? 'is not' : 'is', null),
    )
    .$if(!!options.isTrashed, (qb) => qb.where('assets.status', '!=', AssetStatus.DELETED))
    .$if(!!options.tagId, (qb) => withTagId(qb, options.tagId!))
    .$if(!!options.tagIds && options.tagIds.length > 0, (qb) => {
      console.log("Filtering timeline bucket by tagIds:", options.tagIds);
      return qb.where(eb => {
        return eb.exists(
          eb.selectFrom('asset_tags')
            .select(1)
            .whereRef('asset_tags.assetId', '=', 'assets.id')
            .where('asset_tags.tagId', 'in', options.tagIds!)
        );
      });
    })
    .where('assets.deletedAt', options.isTrashed ? 'is not' : 'is', null)
    .where('assets.isVisible', '=', true)
    .where(truncatedDate(options.size), '=', timeBucket.replace(/^[+-]/, ''))
    .orderBy('assets.localDateTime', options.order ?? 'desc')
    .execute() as any as Promise<AssetEntity[]>;
}


















++ b/server/src/services/timeline.service.ts
import { AssetBuilderOptions, TimeBucketOptions } from 'src/repositories/asset.repository';
    const options: TimeBucketOptions = { ...dto };
  
    if (dto.userId) {
      userIds = [dto.userId];
      
      options.userIds = userIds;
    if (dto.tagIds && dto.tagIds.length > 0) {
      options.tagIds = dto.tagIds;
      console.log("Including tagIds in timeline options:", dto.tagIds);
    }
  
    return options;
    
    if (dto.tagIds && dto.tagIds.length > 0) {
      await this.requireAccess({ auth, permission: Permission.TAG_READ, ids: dto.tagIds });
    }
}
++ b/web/src/lib/stores/assets-store.svelte.ts










  tagIds?: string[];  // Add this
  isFavorite?: boolean; // Add this









    console.log("Updating options with:", JSON.stringify(options));

    console.log("Initializing asset store with options:", JSON.stringify(options));

++ b/web/src/routes/(user)/albums/[albumId=id]/[[photos=photos]]/[[assetId=id]]/+page.svelte






  import Combobox from '$lib/components/shared-components/combobox.svelte';
  import { SvelteSet } from 'svelte/reactivity';
  import FilterBar from '$lib/components/shared-components/filter-bar.svelte'; // You may need

    let selectedTags = $state(new SvelteSet<string>());
    let isStarred = $state(false);




































$effect(() => {
  if (viewMode === AlbumPageViewMode.VIEW) {
    const tagIdsArray = selectedTags.size > 0 ? Array.from(selectedTags) : undefined;
    console.log("Selected tags updated in album page:", tagIdsArray);

    console.log("Updating asset store with filters:", {
      albumId,
      tagIds: tagIdsArray,
      isFavorite: isStarred
    });
    
      void assetStore.updateOptions({ 
      albumId, 
      order: albumOrder,
      tagIds: tagIdsArray,
      isFavorite: isStarred
    });
  } else if (viewMode === AlbumPageViewMode.SELECT_ASSETS) {
    void assetStore.updateOptions({ isArchived: false, withPartners: true, timelineAlbumId: albumId });
  }
});

















          <!-- 888999888 -->
          {#if album.assetCount > 0 && viewMode === AlbumPageViewMode.VIEW}
            <section class="mt-4">
              <FilterBar bind:selectedTags bind:isStarred />
            </section>
          {/if}






